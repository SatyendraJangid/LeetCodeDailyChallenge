***********************PROBLEM**************************
**********uccessful Pairs of Spells and Potions*********
You are given two positive integer arrays spells and potions, of length n and m respectively, 
where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.
You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.
Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.
**********************************************************


class Solution {
public:
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
        sort(potions.begin(),potions.end());
        vector<int> ans;
        //traverse spells array
        int l = spells.size();
        int x = potions.size();
        //time complexity O(N*lon(N))
        for(int i=0;i<l;i++){
           int s = 0,e = potions.size()-1;
           while(s<=e){
               int mid = s+(e-s)/2;
               long prod = (long) spells[i] * potions[mid];
               if(prod<success){
                  s = mid+1;
               }
               if(prod>=success){
                   e = mid-1;
               }
           }
           ans.push_back(x-s);
        }
        return ans;
    }
};
**main logic is => first sort potions array and then find index of satified condition as given in question by using binary search **
