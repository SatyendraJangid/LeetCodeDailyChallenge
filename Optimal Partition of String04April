**************PROBLEM**************
****Optimal Partition of String****

Given a string s, partition the string into one or more substrings such that the characters in each substring are unique.
That is, no letter appears in a single substring more than once.
Return the minimum number of substrings in such a partition.
Note that each character should belong to exactly one substring in a partition.

Example 1:
Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

Example 2:
Input: s = "ssssss"
Output: 6
Explanation:
The only valid partition is ("s","s","s","s","s","s").

****************SOLUTION**************
class Solution {
public:
    int partitionString(string s) {
        vector<int> arr(26);
        int cnt = 0;
        int last_apperance = 0;
        for(int i=0;i<s.length();i++){
            if(arr[s[i]-'a']>=last_apperance){
                cnt++;
                last_apperance = i+1; 
            }
                arr[s[i]-'a'] = i+1;
        }
        return cnt;
    }
};
**************************************
